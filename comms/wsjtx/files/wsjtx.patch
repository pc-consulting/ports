--- CMakeLists.txt.orig	2024-12-28 09:32:24.000000000 +0100
+++ CMakeLists.txt	2025-02-02 15:39:18.984932000 +0100
@@ -934,6 +934,7 @@
 # OpenMP
 #
 find_package (OpenMP)
+set (OpenMP_C_FLAGS "-fopenmp")
 
 #
 # fftw3 single precision library
@@ -951,7 +952,7 @@
 check_type_size (CACHE_ALL HAMLIB_OLD_CACHING)
 check_symbol_exists (rig_set_cache_timeout_ms "hamlib/rig.h" HAVE_HAMLIB_CACHING)
 
-find_package (Usb REQUIRED)
+#find_package (Usb REQUIRED)
 if (WSJT_FOX_OTP)
   add_definitions (-DFOX_OTP)
 endif ()
@@ -983,7 +984,7 @@
 #
 set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
 
-set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Wall -Wextra -fexceptions -frtti")
+set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -fexceptions -frtti")
 
 if (NOT APPLE)
   set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-pragmas")
@@ -1244,7 +1245,7 @@
 target_link_libraries (hash22calc wsjt_fort wsjt_cxx)
 
 add_executable (wsprsim ${wsprsim_CSRCS})
-target_link_libraries (wsprsim ${LIBM_LIBRARIES})
+target_link_libraries (wsprsim "-lm")
 
 add_executable (jt4code lib/jt4code.f90)
 target_link_libraries (jt4code wsjt_fort wsjt_cxx)
@@ -1501,7 +1502,7 @@
   find_package (Portaudio REQUIRED)
   add_subdirectory (map65)
 endif ()
-  add_subdirectory (qmap)
+#  add_subdirectory (qmap)
 
 # build the main application
 generate_version_info (wsjtx_VERSION_RESOURCES
--- wsjtx/CMake/Modules/FindUsb.cmake.orig	2021-12-28 04:31:58.000000000 -0500
+++ wsjtx/CMake/Modules/FindUsb.cmake	2023-09-10 09:39:14.608507000 -0400
@@ -13,25 +13,35 @@
 #  Usb::Usb	- The libusb library
 #
 
+if ( CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" )
+   message ( Status "FreeBSD libusb is built in")
+   set (Usb_FOUND True)
+   set(Usb_LIBRARY "usb")
+   set(Usb_INCLUDE_DIR "/usr/include")
+   set(Usb_LIBRARIES "")
+   add_library (Usb "usb")
+else()
 include (LibFindMacros)
 
-if (WIN32)
-  # Use path suffixes on MS Windows as we probably shouldn't
-  # trust the PATH envvar. PATH will still be searched to find the
-  # library as last resort.
-  if (CMAKE_SIZEOF_VOID_P MATCHES "8")
-    set (_library_options PATH_SUFFIXES MinGW64/dll MinGW64/static)
-  else ()
-    set (_library_options PATH_SUFFIXES MinGW32/dll MinGW32/static)
-  endif ()
-endif ()
-libfind_pkg_detect (Usb usb-1.0
-  FIND_PATH libusb.h PATH_SUFFIXES libusb-1.0
-  FIND_LIBRARY usb-1.0 ${_library_options}
-  )
+   if (WIN32)
+      # Use path suffixes on MS Windows as we probably shouldn't
+      # trust the PATH envvar. PATH will still be searched to find the
+      # library as last resort.
+      if (CMAKE_SIZEOF_VOID_P MATCHES "8")
+       set (_library_options PATH_SUFFIXES MinGW64/dll MinGW64/static)
+      else ()
+        set (_library_options PATH_SUFFIXES MinGW32/dll MinGW32/static)
+      endif ()
+   endif ()
 
-libfind_process (Usb)
+   libfind_pkg_detect (Usb usb-1.0
+     FIND_PATH libusb.h PATH_SUFFIXES libusb-1.0
+     FIND_LIBRARY usb-1.0 ${_library_options}
+     )
 
+   libfind_process (Usb)
+endif()
+
 if (Usb_FOUND AND NOT TARGET Usb::Usb)
   add_library (Usb::Usb UNKNOWN IMPORTED)
   set_target_properties (Usb::Usb PROPERTIES
@@ -40,10 +50,12 @@
     INTERFACE_INCLUDE_DIRECTORIES "${Usb_INCLUDE_DIRS}"
     INTERFACE_LINK_LIBRARIES "${Usb_LIBRARIES}"
     )
-endif ()
+endif()
 
+if ( NOT CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" )
 mark_as_advanced (
   Usb_INCLUDE_DIR
   Usb_LIBRARY
   Usb_LIBRARIES
   )
+endif()
--- wsjtx/CMake/Modules/FindHamlib.cmake.orig	2024-12-28 09:32:24.000000000 +0100
+++ wsjtx/CMake/Modules/FindHamlib.cmake	2025-01-31 23:08:09.952877000 +0100
@@ -18,7 +18,9 @@
   FIND_LIBRARY hamlib
   )
 
-libfind_package (Hamlib Usb)
+if ( NOT CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" )
+ libfind_package (Hamlib Usb)
+endif()
 
 libfind_process (Hamlib)
